"""from 0

Revision ID: f4e199d5c74e
Revises: fd3deeb8b593
Create Date: 2024-06-11 03:05:36.149291

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'f4e199d5c74e'
down_revision: Union[str, None] = 'fd3deeb8b593'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('assistants',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('prompt', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('proofs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tools',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.Column('src', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('sync', sa.BOOLEAN(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uid', sa.TEXT(), nullable=False),
    sa.Column('tid', sa.TEXT(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('uid')
    )
    op.create_table('values',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('assistants_tools',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('assistant_id', sa.INTEGER(), nullable=False),
    sa.Column('tool_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['assistant_id'], ['assistants.id'], ),
    sa.ForeignKeyConstraint(['tool_id'], ['tools.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users_values',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('value_id', sa.INTEGER(), nullable=False),
    sa.Column('proof_count', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['value_id'], ['values.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users_values_proofs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_value_id', sa.INTEGER(), nullable=False),
    sa.Column('proof_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['proof_id'], ['proofs.id'], ),
    sa.ForeignKeyConstraint(['user_value_id'], ['users_values.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('users_values_proofs')
    op.drop_table('users_values')
    op.drop_table('assistants_tools')
    op.drop_table('values')
    op.drop_table('users')
    op.drop_table('tools')
    op.drop_table('proofs')
    op.drop_table('assistants')
    # ### end Alembic commands ###
