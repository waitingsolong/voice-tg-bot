"""hello

Revision ID: fd3deeb8b593
Revises: da1774d7a7c7
Create Date: 2024-06-11 02:21:37.780537

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'fd3deeb8b593'
down_revision: Union[str, None] = 'da1774d7a7c7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('proofs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('content', sa.TEXT(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('values',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.TEXT(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('users_values',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('value_id', sa.INTEGER(), nullable=False),
    sa.Column('proof_count', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['value_id'], ['values.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users_values_proofs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_value_id', sa.INTEGER(), nullable=False),
    sa.Column('proof_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['proof_id'], ['proofs.id'], ),
    sa.ForeignKeyConstraint(['user_value_id'], ['users_values.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('assistants', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.create_unique_constraint(None, 'assistants', ['name'])
    op.drop_column('assistants', 'aid')
    op.add_column('assistants_tools', sa.Column('assistant_id', sa.INTEGER(), nullable=False))
    op.drop_constraint('assistants_tools_assistant_name_fkey', 'assistants_tools', type_='foreignkey')
    op.create_foreign_key(None, 'assistants_tools', 'assistants', ['assistant_id'], ['id'])
    op.drop_column('assistants_tools', 'assistant_name')
    op.alter_column('tools', 'name',
               existing_type=sa.TEXT(),
               nullable=False)
    op.create_unique_constraint(None, 'tools', ['name'])
    op.add_column('users', sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False))
    op.create_unique_constraint(None, 'users', ['uid'])
    op.drop_column('users', 'values')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('values', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_column('users', 'id')
    op.drop_constraint(None, 'tools', type_='unique')
    op.alter_column('tools', 'name',
               existing_type=sa.TEXT(),
               nullable=True)
    op.add_column('assistants_tools', sa.Column('assistant_name', sa.TEXT(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'assistants_tools', type_='foreignkey')
    op.create_foreign_key('assistants_tools_assistant_name_fkey', 'assistants_tools', 'assistants', ['assistant_name'], ['name'])
    op.drop_column('assistants_tools', 'assistant_id')
    op.add_column('assistants', sa.Column('aid', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'assistants', type_='unique')
    op.drop_column('assistants', 'id')
    op.drop_table('users_values_proofs')
    op.drop_table('users_values')
    op.drop_table('values')
    op.drop_table('proofs')
    # ### end Alembic commands ###
